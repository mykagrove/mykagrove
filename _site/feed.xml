<?xml version="1.0" encoding="UTF-8"?> <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"> <channel><title>M.ichael.co.uk</title> <description>Michael Cook's Projects and Assorted Whatnots</description><link>http://m.ichael.co.uk/</link> <atom:link href="http://m.ichael.co.uk/feed.xml" rel="self" type="application/rss+xml"/> <pubDate>Wed, 16 Dec 2015 15:53:10 +0000</pubDate> <lastBuildDate>Wed, 16 Dec 2015 15:53:10 +0000</lastBuildDate> <generator>Jekyll v3.0.1</generator> <item><title>In websites_posts folder!</title> <description>&lt;p&gt;dwa&lt;/p&gt; </description> <pubDate>Tue, 15 Dec 2015 11:57:43 +0000</pubDate><link>http://m.ichael.co.uk/websites/in-websites_posts-folder.html</link> <guid isPermaLink="true">http://m.ichael.co.uk/websites/in-websites_posts-folder.html</guid> <category>websites</category> <category>websites</category> </item> <item><title>Cinebox</title> <description>&lt;h1 id="what-is-that"&gt;What is that?&lt;/h1&gt; &lt;p&gt;Cinebox is a small device that shows local movie theatre listings. It’s microcontroller is an Arduino Pro Mini that connects to the internet via an ESP8266 (ESP-01) gathering data from webserver scripts that access the Cineworld (nearby cinema company) API.&lt;br /&gt; &lt;!--readmore--&gt;&lt;/p&gt;&lt;h2 id="ingredients"&gt;Ingredients&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Tiny 3.7v LiPo battery and charger circuit&lt;/li&gt; &lt;li&gt;Arduino Pro Mini to control&lt;/li&gt; &lt;li&gt;ESP8266 to provide WIFI access for Arduino&lt;/li&gt; &lt;li&gt;2.2” SPI TFT Display (ILI9341)&lt;/li&gt; &lt;/ul&gt;&lt;h2 id="method"&gt;Method&lt;/h2&gt;&lt;h2 id="conclusions"&gt;Conclusions&lt;/h2&gt; &lt;p&gt;If I were to build this again, I wouldn’t use an Arduino at all. I realised during the course of the project that it is actually much slower than the ESP8266 and has less memory, which was actually a big deal when coding intro graphic arrays.&lt;br /&gt; If I were to use a different ESP8266 model such as the ESP-03 which has a whole bunch of inputs and outputs, I reckon it could run the whole program and update the screen pretty much instantly and with high quality images rather than the god-knows-how-many seconds it currently takes.&lt;/p&gt;&lt;p&gt;one&lt;br /&gt; two&lt;br /&gt; three&lt;/p&gt;&lt;h2 id="pass-or-fail"&gt;Pass or Fail?&lt;/h2&gt; &lt;p&gt;I &lt;em&gt;would&lt;/em&gt; say fail for two reasons - it runs super slow and the movie graphics are borderline worthless (by design - the arduino just can’t hack anything better).&lt;br /&gt; However! Aesthetically, it’s great and we do actually use it every week to check what movies are playing. I learned a lot and might even one day rebuild a vamped up pure ESP8266 version, so for those reasons it’s a &lt;strong&gt;pass&lt;/strong&gt;.&lt;/p&gt; </description> <pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate><link>http://m.ichael.co.uk/electronics/in-electronics_posts-folder.html</link> <guid isPermaLink="true">http://m.ichael.co.uk/electronics/in-electronics_posts-folder.html</guid> <category>electronics</category> <category>arduino</category> <category>esp8266</category> <category>electronics</category> </item> <item><title>Cinebox</title> <description># Lorem Cinebox is a small device that shows local movie theatre listings. It's microcontroller is an Arduino Pro Mini that connects to the internet via an ESP8266 (ESP-01) gathering data from webserver scripts that access the Cineworld (nearby cinema company) API. &lt;!--readmore--&gt; ## Lorem If I were to build this again, I wouldn't use an Arduino at all. I realised during the course of the project that it is actually much slower than the ESP8266 and has less memory, which was actually a big deal when coding intro graphic arrays. If I were to use a different ESP8266 model such as the ESP-03 which has a whole bunch of inputs and outputs, I reckon it could run the whole program and update the screen pretty much instantly and with high quality images rather than the god-knows-how-many seconds it currently takes. ~~~ function sassWatch(data) { var sassStyle = isProduction === true ? 'compressed' : 'expanded'; //gulp.src(data.watch) //.pipe(watch({glob: data.watch, emitOnGlob: true, silent: true}, function() { watch(data.watch, {emitOnGlob: true, silent: true}, function(file, cb) { sassCompiling(); var css = rubySass(data.src, { sourcemap: true }) ~~~ {: .beast data-mode="javascript"} Inline code blocks too ``function proper() { console.log('code blocks'); }`` Testing project layout. ### When adding images use the assets like a baws: &lt;img src="/assets/test-a96c47a07782794cfa97172f37ce5e7aa36a2f023c4eb08404cf830e0ec9b38f.jpg" magick="0.25x" width="425" height="319" alt="test-a96c47a07782794cfa97172f37ce5e7aa36a2f023c4eb08404cf830e0ec9b38f.jpg"&gt; &lt;img src="/assets/test-4e1414b901c994ea0848637c0cfe9e6fd5ca68680a65691f7de3850e4db5401c.jpg" width="100" height="75" alt="test-4e1414b901c994ea0848637c0cfe9e6fd5ca68680a65691f7de3850e4db5401c.jpg"&gt; &lt;img src="/assets/test-5eef672ce1cc4f4fd4400435bc63eb2093e6f4888dda48417c79f4ee738ef6c9.jpg" width="425" height="319" alt="test-5eef672ce1cc4f4fd4400435bc63eb2093e6f4888dda48417c79f4ee738ef6c9.jpg"&gt; &lt;img src="/assets/test-4e1414b901c994ea0848637c0cfe9e6fd5ca68680a65691f7de3850e4db5401c.jpg" width="100" height="75" alt="test-4e1414b901c994ea0848637c0cfe9e6fd5ca68680a65691f7de3850e4db5401c.jpg"&gt; #### Pixels (contain) &lt;img src="/assets/test-ce8b5a8a1d9d17e1339c81ce3e5eb72c1aa520438409dc97ed6786fa167b7a6f.jpg" width="50" height="38" alt="test-ce8b5a8a1d9d17e1339c81ce3e5eb72c1aa520438409dc97ed6786fa167b7a6f.jpg"&gt; #### Pixels (cover) &lt;img src="/assets/test-2ceb4465bf9ef966205ac7708d96a29399fc8a0d2ecc754cb3eb30be69ca9c39.jpg" width="67" height="50" alt="test-2ceb4465bf9ef966205ac7708d96a29399fc8a0d2ecc754cb3eb30be69ca9c39.jpg"&gt; #### Pixels (force) &lt;img src="/assets/test-f36087a3907385f4ca46ab228c8afa53b781c5ed1e2372ac791702fd64bcd748.jpg" width="50" height="50" alt="test-f36087a3907385f4ca46ab228c8afa53b781c5ed1e2372ac791702fd64bcd748.jpg"&gt; #### Percent (contain) &lt;img src="/assets/test-043f7ddb7238eb78c8fb1fda8db15e4d68cf3a21da6d80d00616ff3469b4947c.jpg" width="106" height="80" alt="test-043f7ddb7238eb78c8fb1fda8db15e4d68cf3a21da6d80d00616ff3469b4947c.jpg"&gt; ### Can link to asset files like: /assets/test.jpg https://github.com/jekyll-assets/jekyll-assets/tree/legacy#jekyllassets https://github.com/Shopify/liquid/wiki/Liquid-for-Designers ### Can link to other posts: [disabled while figuring out directory structure] ### When I come to it, include some photos of my sketches, it's gold mate. Srs. # \# ## \#\# ### \#\#\# #### \#\#\#\# There is a significant amount of subtle, yet precisely calibrated, styling to ensure that your content is emphasized while still looking aesthetically pleasing. All links are easy to [locate and discern](#), yet don't detract from the harmony of a paragraph. The _same_ goes for italics and __bold__ elements. Even the the strikeout works if &lt;del&gt;for some reason you need to update your post&lt;/del&gt;. For consistency's sake, &lt;ins&gt;The same goes for insertions&lt;/ins&gt;, of course. ### Code, with syntax highlighting Here's an example of some ruby code with line anchors. &lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-ruby" data-lang="ruby"&gt;&lt;span class="c1"&gt;# The most awesome of classes &lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Awesome&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt; &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;EvenMoreAwesome&lt;/span&gt; &lt;span class="n"&gt;validates_presence_of&lt;/span&gt; &lt;span class="ss"&gt;:something&lt;/span&gt; &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;email_format: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;favorite_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'created awesomeness'&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;email_format&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/\S+@\S+\.\S+/&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; Here's some CSS: &lt;figure class="highlight"&gt;&lt;pre&gt;&lt;code class="language-css" data-lang="css"&gt;&lt;span class="nc"&gt;.foobar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c"&gt;/* Named colors rule */&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;tomato&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; # Headings! They're responsive, and well-proportioned (in `padding`, `line-height`, `margin`, and `font-size`). They also heavily rely on the awesome utility, [BASSCSS](http://www.basscss.com/). ##### They draw the perfect amount of attention This allows your content to have the proper informational and contextual hierarchy. Yay. ### There are lists, too * Apples * Oranges * Potatoes * Milk 1. Mow the lawn 2. Feed the dog 3. Dance ### Images look great, too ### There are also pretty colors Also the result of [BASSCSS](http://www.basscss.com/), you can &lt;span class="bg-dark-gray white"&gt;highlight&lt;/span&gt; certain components of a &lt;span class="red"&gt;post&lt;/span&gt; &lt;span class="mid-gray"&gt;with&lt;/span&gt; &lt;span class="green"&gt;CSS&lt;/span&gt; &lt;span class="orange"&gt;classes&lt;/span&gt;. I don't recommend using blue, though. It looks like a &lt;span class="blue"&gt;link&lt;/span&gt;. ### Stylish blockquotes included You can use the markdown quote syntax, `&gt;` for simple quotes. &gt; Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse quis porta mauris. However, you need to inject html if you'd like a citation footer. I will be working on a way to hopefully sidestep this inconvenience. &lt;blockquote&gt; &lt;p&gt; Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. &lt;/p&gt; &lt;footer&gt;&lt;cite title="Antoine de Saint-Exupéry"&gt;Antoine de Saint-Exupéry&lt;/cite&gt;&lt;/footer&gt; &lt;/blockquote&gt; ### There's more being added all the time Checkout the [Github repository](https://github.com/johnotander/pixyll) to request, or add, features. Happy writing. </description> <pubDate>Sat, 12 Dec 2015 00:00:00 +0000</pubDate><link>http://m.ichael.co.uk/electronics/example.html</link> <guid isPermaLink="true">http://m.ichael.co.uk/electronics/example.html</guid> <category>electronics</category> <category>arduino</category> <category>esp8266</category> <category>electronics</category> </item> </channel> </rss>