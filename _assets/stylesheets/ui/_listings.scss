
// Must admit, these mixin names are getting a bit like, wonder if I can namespace them..?
@mixin listing__image__inner--reset--shadow--soft {
	// default version of that in hoverlistings()
	box-shadow: inset 0px 0px 30px 1px rgba(255,255,255,0.5),
				inset 0px 0px 30px 1px rgba(0,0,0,0.65);
}
@mixin listing__image__inner--reset--shadow--hard {
	// default version of that in hoverlistings()
	box-shadow: inset 0px 0px 30px 1px rgba(255,255,255,0.5),
				inset 0px 0px 30px 1px rgba(0,0,0,0.65)!important;
}
@mixin listing__image__inner--reset--transform {
	-webkit-transform: none!important;
	-moz-transform:    none!important;
	-ms-transform:     none!important;
	-o-transform:      none!important;
	transform:         none!important;
}
.listing__image__inner--reset--shadow--soft { @include listing__image__inner--reset--shadow--soft; }
.listing__image__inner--reset--shadow--hard { @include listing__image__inner--reset--shadow--hard; }
.listing__image__inner--reset--transform { @include listing__image__inner--reset--transform; }

.listing {
	position: relative;
	border-top: 2px solid map-get($colors, primary);
	padding-top: $grid-gutter-width;
	padding-bottom: $grid-gutter-width;

	// Hide certain headers initially, colored and shown by js.
	h1,h2 { display: none; }

	h2 {
		padding-bottom: 0;
	}
	&__summary {
		@include fs(16);
		padding: 0;
		@include sm-plus {
			padding-bottom: $grid-gutter-width * 0.5;
		}
	}
	&__date {
		padding-bottom: $grid-gutter-width * 0.5;
		@include sm-plus {
			padding-top: 10px;
			padding-bottom: 0;
		}
	}

	&__image {
		display: block;

		&__inner {
			@include xs {
				width: 100%;
				height: 270px;
			}
			@include sm-plus {
				position: absolute;
				top: 0; right: 0; bottom: 0; left: 0;
			}
			background-position: center;
			background-size: cover;
			@extend .listing__image__inner--reset--shadow--soft;
		}
	}
	@include xs {
		&__image {
			width: 100%;
			height: 180px * 1.5;
			margin-bottom: $grid-gutter-width;
			&__inner {
				@include listing__image__inner--reset--transform;
				@include listing__image__inner--reset--shadow--hard;

				box-shadow: none!important;
			}
		}
	}
	@include sm-plus {
		&__image {
			position: absolute;
			left: 0;
			top: $grid-gutter-width;

			// must be on parent
			-webkit-perspective: 800px;
			-moz-perspective:    800px;
			-ms-perspective:     800px;
			-o-perspective:      800px;
			perspective:         800px;

			&__inner {
				-webkit-transform-style: preserve-3d;
				//-webkit-transform: perspective(1000) rotateX(50deg) rotateY(20deg);
				outline: 1px solid transparent; // firefox anti-aliasing


				&.reset {
					@include animate(all, 1s, ease-in-out);
					@include listing__image__inner--reset--transform;
					@include listing__image__inner--reset--shadow--hard;
				}
			}
		}
	}
	// This could be rewritten to use grid columns and only set heights,
	// Which would be more fluid but less predictable. Much of a muchness.
	@mixin listing__image--sizing($scale) {
		padding-left: 320px * $scale + $grid-gutter-width;
		min-height: 180px * $scale + $grid-gutter-width * 2;
		.listing__image {
			width: 320px * $scale;
			height: 180px * $scale;

			@include attention {
				// bit overwraught, by why the heck not
				/*
				width: 320px * $scale + $grid-gutter-width;
				height: 180px * $scale + $grid-gutter-width;
				top: $grid-gutter-width - $grid-gutter-width * 0.5;
				left: - $grid-gutter-width * 0.5;
				*/
			}
		}
	}
	&--has-image {
		@include sm { @include listing__image--sizing(0.6); }
		@include md { @include listing__image--sizing(0.8); }
		@include lg { @include listing__image--sizing(1); }
	}

	&__readmore {
		text-decoration: underline;
		color: map-get($colors, quaternary);
		.fa { margin-left: 5px; }
	}
}